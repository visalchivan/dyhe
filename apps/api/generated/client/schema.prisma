// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
  DRIVER
  MERCHANT
}

enum Status {
  ACTIVE
  INACTIVE
}

enum PackageStatus {
  PENDING // Created/unassigned (In Central Warehouse)
  ON_DELIVERY // Assigned to driver
  DELIVERED // Success
  FAILED // Delivery failed
  RETURNED // Customer returns
}

enum Gender {
  MALE
  FEMALE
}

enum DriverStatus {
  ACTIVE
  INACTIVE
  ON_DUTY
  OFF_DUTY
  ON_BREAK
  OFF_BREAK
  ON_TRIP
  OFF_TRIP
}

enum Bank {
  ABA
  ACELEDA
  WING
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  name      String
  email     String   @unique
  phone     String
  status    Status   @default(ACTIVE)
  gender    Gender   @default(MALE)
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  driver Driver?

  @@map("users")
}

model Driver {
  id                String       @id @default(uuid())
  userId            String?      @unique @map("user_id")
  user              User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String
  email             String?      @unique
  phone             String       @unique
  deliverFee        Decimal      @default(0) @map("delivery_fee")
  driverStatus      DriverStatus @default(ACTIVE)
  bank              Bank         @default(ABA)
  bankAccountNumber String       @unique @map("bank_account_number")
  bankAccountName   String?      @unique @map("bank_account_name")
  googleMapsUrl     String?      @map("google_maps_url")
  status            Status       @default(ACTIVE)
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")

  packages Package[]

  @@map("drivers")
}

model Merchant {
  id                String   @id @default(uuid())
  name              String
  phone             String
  email             String?  @unique
  deliverFee        Decimal  @default(0) @map("delivery_fee")
  bank              Bank     @default(ABA)
  bankAccountNumber String   @unique @map("bank_account_number")
  bankAccountName   String?  @unique @map("bank_account_name")
  address           String
  googleMapsUrl     String?  @map("google_maps_url")
  status            Status   @default(ACTIVE)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  packages Package[]

  @@map("merchants")
}

model Package {
  id                    String        @id @default(uuid())
  packageNumber         String        @unique @map("package_number")
  price                 Decimal       @default(0)
  codAmount             Decimal       @default(0) @map("cod_amount")
  deliveryFee           Decimal       @default(0) @map("delivery_fee")
  // Issue handling fields
  hasIssue              Boolean       @default(false) @map("has_issue")
  issueNote             String?       @map("issue_note")
  extraDeliveryFee      Decimal       @default(0) @map("extra_delivery_fee")
  status                PackageStatus @default(PENDING)
  customerName          String
  customerPhone         String
  customerAddress       String
  customerLatitude      Float?        @map("customer_latitude")
  customerLongitude     Float?        @map("customer_longitude")
  customerGoogleMapsUrl String?       @map("customer_google_maps_url")

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  driverId String?
  driver   Driver? @relation(fields: [driverId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("packages")
}

model Settings {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  category    String   @default("general")
  isPublic    Boolean  @default(false) @map("is_public")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("settings")
}
